trigger:
- main

pr: none

pool:
  vmImage: 'ubuntu-20.04'

stages:
- stage: BUILD
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
        addToPath: true
        architecture: 'x64'
    
    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy'
            inputs:
              azureSubscription: 'Free Trial(3e3c63cc-eef2-4386-9f86-ea6a77a47519)'
              appType: 'functionAppLinux'
              appName: 'GS-afa-function-001123'
              deployToSlotOrASE: true
              resourceGroupName: 'vkak'
              slotName: 'blue'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
          

- stage: postdeploy
  displayName: postdeploy
  jobs:
  - job: postdeploy
    displayName: postdeploy
    steps: 
      - task: CmdLine@2
        inputs:
          script: |
            # Define the Function App endpoint URL
              echo "Using endpoint URL: ${ENDPOINT_URL}"
            
            # Function to perform the health check
            health_check() {
              ALL_PASSED=true
            
              for i in {1..3}; do
                echo "Health check attempt $i..."
                RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $ENDPOINT_URL)
            
                if [ $RESPONSE -eq 200 ]; then
                  echo "Health check $i successful: HTTP $RESPONSE"
                else
                  echo "Health check $i failed: HTTP $RESPONSE"
                  ALL_PASSED=false
                  break
                fi
            
                # Wait for 2 seconds before the next check
                sleep 2
              done
            
              if $ALL_PASSED; then
                echo "All health checks passed!"
              else
                echo "Health check failed. Exiting with error status."
                exit 1
              fi
            }
            
            # Call the health check function
            health_check
      - task: AzureAppServiceManage@0
        inputs:
          azureSubscription: 'Free Trial(3e3c63cc-eef2-4386-9f86-ea6a77a47519)'
          Action: 'Swap Slots'
          WebAppName: 'GS-afa-function-001123'
          ResourceGroupName: 'vkak'
          SourceSlot: 'blue'
          
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Free Trial(3e3c63cc-eef2-4386-9f86-ea6a77a47519)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo $(apimupdate)
            $(apimupdate)